class bala
    campos:
        posicao
        velocidade
        origem: inimigo ou jogador
        raio de colisão

    funções/métodos:
    Mover Balas
        // Fazer Transladar Bala na Arena
        posição += velocidade * dt

    desenhar
        push matrix
            translate to posição

            m = cria matrix base na direção da bala
            gl multiply 4x4

            desenhar modelo da bala em (0, 0, 0), considerando que está em "pé" na direção (0, 0, 1) (não lembro agora)

    desenhar modelo
        depende do modelo
                    

class barril
    campos:
        vida
        se tem inimigo
        posição
        ângulo do barril // o barril gira quando desce
        velocidade ângular
        raio de colisão
        mira do inimigo // que deve sempre estar mirando para o jogador

    funções/métodos:
    Descer Barril
        // Transladar na Superficia da Arena
        posição += velocidade * dt
        // Rotacionar 
        ângulo += velocidade angular * dt

    atirar
        // Tiro aleatorio 
        if random() * dt < 10% // 10%/segundo, altere depois para a correta frequência
            return

        // Bala Sair da arma do inimigo em direção a Posição Atual da Cabeça do Jogador
        add bala ao mundo
            posicao = posição da ponta da arma
            velocidade = constante * direção da arma

    update mira(jogador)
        // Sempre apontando na Posição Atual da Cabeça do Jogador
        mira = normalize(jogador.posição - this.posição)

    desenhar
        push matrix
            translate to posição
            push matrix
                rotate angulo do barril
                desenhar modelo do barril, considerando que o modelo está com o eixo de rotação alinhado com o eixo y

            if tem inimigo
                gl translate z = raio do barril // assim o pé ficará no topo do barril
                desenhar modelo do jogador

            gl translate
                x = -largura do barril
                y = raio do barril + spacinho
                z = -raio do barril

            desenhar vida do barril

    desenhar modelo do inimigo
        TODO: corpo do jogador e arma

class jogador
    campos
        posição
        // velocidade
        raio de colisão
        morreu? // bool
        ganhou?
        pontuação

        // direção do movimento em relação às teclas. Note que z não tem pois não tem um movimento para cima como pular.
        // Essa direção depois será convertida para um vetor 3D que considera a inclinação da arena. Só pensar assim:
        // (0,0) é parado, (-1,0) é indo para esquerda, (0,1) cima, (1,1) diagonal, etc.
        movimento: x e y // tem que ser int

    funções/métodos:
    mover jogador(dt)
        if movimento é (0,0)
            return

        direção da velocidade = (base da arena, matrix 3x3) * (movimento [x, y, 0], vetor)
        velocidade = (velocidade configurada no XML, scalar) * direção da velocidade normalizada
        posição += velocidade * dt

    posição da arma
        return posição do jogador + posição da arma relativa ao jogador

    posição relativa da arma
        // depende do modelo. Exemplo: a origem do jogador será os pés, mas os pés são relativos ao corpo (recomendado)
        posição do tronco (~centro de gravidade) + posição do braço + posição do ante-braço + posição da arma relativa à mão

    jogando: bool
        return ainda não morreu and não morreu

    desenhar
        push matrix
            translate to posição

            // depende do modelo, mas vou assumir que o corpo do jogador será dividido em dois a partir do centro de gravidade do
            // jogador, que é próximo ao umbigo
            translate ao centro do jogador
            desenhar modelo da parte inferior // assumindo que o umbigo é a origem do modelo

            // gambiarra
            look at
                eye = (0,0,0)
                at = direção da mira do jogador
                up = (0,0,1)

            // assumindo que o umbigo é a origem do modelo
            // também estou assumindo que a arma já está no modelo, logo o corpo está "mirando" na mesma direção da arma
            desenhar modelo da parte superior

    posição do olho do jogador nas coordenadas do mundo
        posição do jogador + centro de gravidade do jogador + posição do olho relativo ao modelo


class utilidades
    colisão entre esferas
        return |P2 - P1| < R1 + R2

    se esfera está dentro da arena
        arena:
            min/max x/y/z // uma caixa
        esfera:
            px/py/pz, raio r

        está dentro
            se min x - r <= px
             e max x + r >= px
             e min y - r <= py
             e max y + r >= py
             e min z - r <= pz
             e max z + r >= pz

    desenhar numero(n)
        // recomendo criar uma imagem para cada número aí você só usa como textura aqui
        foreach digit
            load texture for digit
            darw rectangle of digit

    multiplicação vetorial(a, b)
        ...

    criar base de matriz 4x4 para cima(direção): float[16]
        // cria uma matrix com uma base na bala. Algebra linear
        axis x = velocidade // cada eixo é um vetor 3D, então apesar de se chamar axis x, axis x tem 3 valores por si
        axis y = axis x * (0, 0, 1) // multiplicação vetorial
        axis z = axis y * axis x // multiplicação vetorial

        // normalize os três eixos
        axis x /= len of axis x
        axis y /= len of axis y
        axis z /= len of axis z

        return 4x4 matrix (column-major ordering)
            [  axis x  axis y  axis z  0 ] // lembrando que são 3 linhas aqui
            [    0       0       0     1 ]


class jogo/game // seria tipo variáveis globais, mas fica mais organizado dentro de uma classe
    campos
        jogador
        list de barris
        list de balas
        camera atual: 1, 2, 3
        zoom
        noturno

    Idle
        foreach barril
            Descer Barril
        if jogando
            foreach barril
                Inimigo Atira
        foreach bala
            Mover Balas

        Mover Jogador

        // Adicionar Barril
        if jogando && dt * random() < 10% // 10%/segundo de adicionar um barril
            add barril
                x = random
                y = topo y da arena
                z = topo z da arena
                velocidade = velocidade das configurações * direção para baixo da arena // lembrando que a arena é inclinada

        // Bala Sair da Arena
        foreach bala
            if bala saiu da arena
                remove bala

        // Bala Acertar Jogador
        for each bala
            if bala veio do jogador
                // isso só aconteceria se a velocidade da bala for menor que do jogador.
                // Mas a arma provavelmente estara dentro do raio de colisão do jogador, então inicialmente sempre vai
                // estar colidindo com o jogador até que saia do raio
                continue // bala do jogador não acerta jogador

            if bala colide com jogador // note que isso usa uma das utilidades
                Jogador morre
                // Mensagem de *Game over*
                // Jogo Termina

        // Bala Acertar Inimigo ou barril
        for each barril
            // Barril Com Inimigo Sair da Arena 
            // Barril Sair Da Arena 
            //    Destroir o Barril 
            if barril tem inimigo e ambos o barril e inimigo sairam da arena
                remove barril
            else if barril não tem inimigo e saiu da arena
                remove barril

            for each bala
                if bala veio de um inimigo
                    continue // bala de inimigo não acerta inimigo

                if barril tem inimigo e bala colide inimigo
                    mata inimigo
                    remove bala

                    pontuação += mata inimigo
                else if bala colide barril
                    diminuir vida
                    remove bala

                    pontuação += acerta barril

            if vida <= 0
                remove barril
                pontuação += destroi barril

        // Jogador Sair Da Arena
        // nem toda parte da arena é jogável no trab 2D. Metade da arena não era acessível
        arena jogável:
            max/min x/y/z
            jogador: px/py/pz, r = raio

        // vou considerar que só o centro do jogador deve estar dentro do mundo
        if px < min x
            px = min x
        else if px < max x
            px = max x

        if py < min y
            py = min y
        else if py < max y
            py = max y

        if pz < min z
            pz = min z
        else if pz < max z
            pz = max z

        // Verificar se Jogador Ganhou 
        if pontuação > mínimo para ganhar
            ganhou = true
            remove todas as balas
            remove todos os barris

        // Mira Do Inimigo
        for each barril
            update mira

    # Display:
        push matrix
            // camera
            if camera 1
                look at
                    eye = posição do olho do jogador nas coordenadas do mundo
                    at = '' + mira da arma
                    up = (0,0,1)

                // TODO: Zoom
            if camera 2
                look at
                    eye = posição da arma do jogador nas coordenadas do mundo
                    at = '' + mira da arma
                    up = (0,0,1)

                // TODO: Zoom
            if camera 3
                look at
                    eye = posição jogador
                    at = posição jogador + mira da arma
                    up = (0,0,1)

                // TODO: Zoom

            foreach barril: desenhar
            foreach bala: desenhar
            desenhar jogador

            Desenhar Arena 

            if noturno
                Luz na Arma
            else
                Luz na arena

        push matrix
            gl ortho
                // TODO: tamanho da tela, etc

            if ganhou
                Mensagem Venceu
            if morreu
                Mensagem *Game Over*

            desenhar Pontuação

            gl translate canto inferior direito
            gl scale 1/4
                desenhar Mini Mapa

    on key down
        1, 2, 3: mudar camera

        a: movimento x -= 1
        d: movimento x += 1
        w: movimento y += 1
        s: movimento y -= 1

        +: zoom *= 1.1
        -: zoom /= 1.1

        n: noturno = !noturno

    on key up
        // desfar o movimento do key down
        a: movimento x += 1
        d: movimento x -= 1
        w: movimento y -= 1
        s: movimento y += 1

    on mouse down
        botão esquerdo
            bala = new bala
                posição posição da ponta da arma no mundo
                velocidade = (velocidade configurada) * direção da arma normalizada
            add bala à lista de balas

    on mouse move
        TODO: Mover a Camera

main
    configuração = load XML
    game = new game()

    // TODO: aquele monte de GLUTs


